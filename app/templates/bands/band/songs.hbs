{{page-title @model.name " songs | Rock & Roll with Octane" replace=true}}

<div class="mb-8 flex">
  {{!-- Show sorting options only when there's at least one song --}}
  {{#if this.sortedSongs.length}}
    <span class="relative z-0 inline-flex shadow-sm">
      {{!-- We can improve the user experience by making the buttons be --}}
      {{!-- links to the route with the appropriate sorting option. Since the --}}
      {{!-- sorting option is now embedded in the URL, changing the sorting --}}
      {{!-- option is the same thing as transitioning to the same route with the --}}
      {{!-- sort query parameter changed. --}}
      {{!-- Having the sorting implemented through links has the advantage that --}}
      {{!-- no actions need to be defined and that when one hovers over the --}}
      {{!-- buttons, the URL is displayed just as with "ordinary" links. --}}
      <LinkTo
        class="rounded-l-md inline-flex items-center px-4 py-2 border
               border-gray-500 bg-purple-600 leading-5 font-medium
               text-gray-100 hover:text-white hover:bg-purple-500"
        data-test-rr="sort-by-title-asc"
        {{!-- The <LinkTo> component can take a @query parameter that contains --}}
        {{!-- a hash object that the query parameter values should be set to. --}}
        {{!-- Also note that we omitted the route name argument. That is becasue --}}
        {{!-- it is not necessary to pass the route name if the destination route --}}
        {{!-- is the current one. --}}
        @query={{hash s="title"}}
      >
        Title
        <FaIcon
          class="ml-2"
          @icon="angle-up"
          @prefix="fas"
        />
      </LinkTo>
      <LinkTo
        class="-ml-px inline-flex items-center px-4 py-2 border
               border-gray-500 bg-purple-600 leading-5 font-medium
               text-gray-100 hover:text-white hover:bg-purple-500"
        data-test-rr="sort-by-title-desc"
        {{!-- A leading dash (-) is used to indicate descending sorting --}}
        @query={{hash s="-title"}}
      >
        Title
        <FaIcon
          class="ml-2"
          @icon="angle-down"
          @prefix="fas"
        />
      </LinkTo>
      <LinkTo
        class="-ml-px inline-flex items-center px-4 py-2 border
               border-gray-500 bg-purple-600 leading-5 font-medium
               text-gray-100 hover:text-white hover:bg-purple-500"
        data-test-rr="sort-by-rating-asc"
        @query={{hash s="rating"}}
      >
        Rating
        <FaIcon
          class="ml-2"
          @icon="angle-up"
          @prefix="fas"
        />
      </LinkTo>
      <LinkTo
        class="rounded-r-md -ml-px inline-flex items-center px-4 py-2 border
               border-gray-500 bg-purple-600 leading-5 font-medium
               text-gray-100 hover:bg-purple-500 hover:text-white"
        data-test-rr="sort-by-rating-desc"
        {{!-- A leading dash (-) is used to indicate descending sorting --}}
        @query={{hash s="-rating"}}
      >
        Rating
        <FaIcon
          class="ml-2"
          @icon="angle-down"
          @prefix="fas"
        />
      </LinkTo>
    </span>
  {{/if}}
  {{!-- Always show the search box even if the search term results in no songs --}}
  <div class="relative ml-auto rounded-md shadow-sm">
    <label for="search-box" class="sr-only">Search</label>
    <input
      class="border rounded-md py-2 px-3 block w-full pr-10 text-gray-800 sm:text-sm sm:leading-5"
      id="search-box"
      data-test-rr="search-box"
      value={{this.searchTerm}}
      {{on "input" this.updateSearchTerm}}
    />
    <div class="absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none">
      <FaIcon
        class="h-5 w-5 text-gray-400"
        @icon="search"
        @prefix="fas"
      />
    </div>
  </div>
</div>
{{#if this.sortedSongs.length}}
  <ul>
    {{#each this.sortedSongs as |song|}}
      <li class="mb-2" data-test-rr="song-list-item">
        {{song.title}}
        <span class="float-right">
          <StarRating
            {{!-- Below uni-directional flow has been dubbed "Data Down Actions Up" (or DDAU, --}}
            {{!-- for short) and is one of the best practices that becomes second nature to --}}
            {{!-- Ember developers after a while. It establishes a data flow that is easy to --}}
            {{!-- debug (at least definitely easier than if we had two-way data bindings and --}}
            {{!-- we changed passed-in values willy-nilly) and gives flexibility to the --}}
            {{!-- component that leverages it. --}}

            {{!-- As the song's rating is updated, the change of the @rating argument will --}}
            {{!-- trigger an update of the component's stars property, and so the component's --}}
            {{!-- template will get re-rendered with the appropriate number of full stars. --}}
            @rating={{song.rating}}

            {{!-- The song's rating will be set to the value the function is called with. --}}
            @onUpdate={{fn this.updateRating song}}
          />
        </span>
      </li>
    {{/each}}
  </ul>
{{else}}
  <p class="text-center" data-test-rr="no-songs-text">
    The band has no songs yet.
  </p>
{{/if}}
{{#if this.showAddSong}}
  <div class="flex justify-center mt-2">
    <button
      type="button"
      class="px-4 py-2 rounded bg-purple-600 shadow-md hover:shadow-lg hover:text-white hover:bg-purple-500 focus:outline-none"
      {{on "click" (set this "showAddSong" false)}}
    >
      Add song
    </button>
  </div>
{{else}}
  <div class="mt-6 flex">
    {{!-- The sr-only class is used to hide information that is intended only for screen --}}
    {{!-- readers from the layout of a rendered page. If you do not include a label for --}}
    {{!-- every input, screen readers may have trouble with the forms. For such inline forms, --}}
    {{!-- you can hide labels with the sr-only class. --}}
    <label for="title" class="sr-only">Title</label>
    <input
      type="text"
      id="title"
      class="text-gray-800 bg-white rounded-md py-2 px-4"
      placeholder="Song Title"
      value={{this.title}}
      data-test-r="new-song-title'"
      {{on "input" this.updateTitle}}
    />
    <button
      type="button"
      class="ml-4 px-4 py-2 rounded bg-purple-600 shadow-md hover:shadow-lg hover:text-white"
      data-test-rr="save-song-button"
      {{on "click" this.saveSong}}
    >
      Save
    </button>
    <button
      type="button"
      class="ml-2 px-4 p-2 rounded bg-white border border-bg-purple-600 shadow-md text-purple-600 hover:shadow-lg"
      {{on "click" this.cancel}}
    >
      Cancel
    </button>
  </div>
{{/if}}
