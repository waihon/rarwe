{{page-title @model.name " songs | Rock & Roll with Octane" replace=true}}

{{#if this.sortedSongs.length}}
  <ul>
    {{#each this.sortedSongs as |song|}}
      <li class="mb-2" data-test-rr="song-list-item">
        {{song.title}}
        <span class="float-right">
          <StarRating
            {{!-- Below uni-directional flow has been dubbed "Data Down Actions Up" (or DDAU, --}}
            {{!-- for short) and is one of the best practices that becomes second nature to --}}
            {{!-- Ember developers after a while. It establishes a data flow that is easy to --}}
            {{!-- debug (at least definitely easier than if we had two-way data bindings and --}}
            {{!-- we changed passed-in values willy-nilly) and gives flexibility to the --}}
            {{!-- component that leverages it. --}}

            {{!-- As the song's rating is updated, the change of the @rating argument will --}}
            {{!-- trigger an update of the component's stars property, and so the component's --}}
            {{!-- template will get re-rendered with the appropriate number of full stars. --}}
            @rating={{song.rating}}

            {{!-- The song's rating will be set to the value the function is called with. --}}
            @onUpdate={{fn this.updateRating song}}
          />
        </span>
      </li>
    {{/each}}
  </ul>
{{else}}
  <p class="text-center" data-test-rr="no-songs-text">
    The band has no songs yet.
  </p>
{{/if}}
{{#if this.showAddSong}}
  <div class="flex justify-center mt-2">
    <button
      type="button"
      class="px-4 py-2 rounded bg-purple-600 shadow-md hover:shadow-lg hover:text-white hover:bg-purple-500 focus:outline-none"
      {{on "click" (set this "showAddSong" false)}}
    >
      Add song
    </button>
  </div>
{{else}}
  <div class="mt-6 flex">
    {{!-- The sr-only class is used to hide information that is intended only for screen --}}
    {{!-- readers from the layout of a rendered page. If you do not include a label for --}}
    {{!-- every input, screen readers may have trouble with the forms. For such inline forms, --}}
    {{!-- you can hide labels with the sr-only class. --}}
    <label for="title" class="sr-only">Title</label>
    <input
      type="text"
      id="title"
      class="text-gray-800 bg-white rounded-md py-2 px-4"
      placeholder="Song Title"
      value={{this.title}}
      data-test-r="new-song-title'"
      {{on "input" this.updateTitle}}
    />
    <button
      type="button"
      class="ml-4 px-4 py-2 rounded bg-purple-600 shadow-md hover:shadow-lg hover:text-white"
      data-test-rr="save-song-button"
      {{on "click" this.saveSong}}
    >
      Save
    </button>
    <button
      type="button"
      class="ml-2 px-4 p-2 rounded bg-white border border-bg-purple-600 shadow-md text-purple-600 hover:shadow-lg"
      {{on "click" this.cancel}}
    >
      Cancel
    </button>
  </div>
{{/if}}
